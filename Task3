import pandas as pd
import numpy as np
from sklearn.model_selection import train_test_split
from sklearn.ensemble import RandomForestClassifier
from sklearn.metrics import classification_report, confusion_matrix
from sklearn.preprocessing import StandardScaler
from imblearn.over_sampling import SMOTE
df=pd.read_csv('/content/creditcard.csv')
df
print(df.isnull().sum())
print(df.columns)
columns_to_drop=['Time','Amount']
for column in columns_to_drop:
  if column in df.columns:
    df.drop([column],axis=1,inplace=True)
x=df.drop('Class',axis=1)
y=df['Class']
X_train,X_test,y_train,y_test = train_test_split(x,y,test_size=0.2,random_state=42,stratify=y)
import pandas as pd
import numpy as np
from sklearn.model_selection import train_test_split
from sklearn.ensemble import RandomForestClassifier
from sklearn.metrics import classification_report, confusion_matrix
from sklearn.preprocessing import StandardScaler
from imblearn.over_sampling import SMOTE

df = pd.read_csv('/content/creditcard.csv')

# Check for missing values in the 'Class' column and handle them
print(df['Class'].isnull().sum())  # Print the number of missing values

# Option 1: Drop rows with missing values in 'Class'
df.dropna(subset=['Class'], inplace=True)

# Option 2: Impute missing values with a specific value (e.g., the most frequent value)
# most_frequent_class = df['Class'].mode()[0]  # Get the most frequent class
# df['Class'].fillna(most_frequent_class, inplace=True)

# Continue with your code
columns_to_drop = ['Time', 'Amount']
for column in columns_to_drop:
    if column in df.columns:
        df.drop([column], axis=1, inplace=True)

x = df.drop('Class', axis=1)
y = df['Class']
X_train, X_test, y_train, y_test = train_test_split(x, y, test_size=0.2, random_state=42, stratify=y)
smote = SMOTE(random_state=42)
X_train_resampled, y_train_resampled = smote.fit_resample(X_train, y_train)
from sklearn.ensemble import RandomForestClassifier
from sklearn.metrics import classification_report, confusion_matrix
rf_model = RandomForestClassifier(random_state=42)
rf_model.fit(X_train_resampled, y_train_resampled)
 y_pred = rf_model.predict(X_test)
from sklearn.ensemble import IsolationForest
iso_forest = IsolationForest(contamination=0.01,random_state=42)
y_train_iso_pred = iso_forest.fit_predict(X_train)
y_train_iso_pred = [1 if x == -1 else 0 for x in y_train_iso_pred]
print(confusion_matrix(y_train,y_train_iso_pred))
print(classification_report(y_train,y_train_iso_pred))
y_test_iso_pred = iso_forest.predict(X_test)
y_test_iso_pred = [1 if x == -1 else 0 for x in y_test_iso_pred]
print(confusion_matrix(y_test,y_test_iso_pred))
print(classification_report(y_test,y_test_iso_pred))
